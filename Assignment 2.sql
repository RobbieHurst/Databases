DROP TABLE TREATMENT_TABLE;
DROP TABLE BILLING_TABLE;
DROP TABLE MEDICINE_TABLE;
DROP TABLE DISEASE_TABLE;
DROP TABLE STAFF_TABLE;
DROP TABLE VETERINARIAN_TABLE;
DROP TABLE SPECIALITY_TABLE;
DROP TABLE ANIMAL_TABLE;
DROP TABLE CUSTOMER_TABLE;

CREATE TABLE CUSTOMER_TABLE (

  CUSTOMER_ID VARCHAR(6),
  FIRST_NAME  VARCHAR(50),
  SURNAME     VARCHAR(50),
  CONTACT     VARCHAR(30),
  EMAIL       VARCHAR(30),
  CONSTRAINT PK_CUSTOMER_ID PRIMARY KEY (CUSTOMER_ID)

);

CREATE TABLE ANIMAL_TABLE (

  ANIMAL_ID     VARCHAR(4),
  ANIMAL_TYPE   VARCHAR(30),
  ANIMAL_BREED  VARCHAR(30),
  ANIMAL_COLOUR VARCHAR(30),
  CONSTRAINT PK_ANIMAL_ID PRIMARY KEY (ANIMAL_ID)

);

CREATE TABLE SPECIALITY_TABLE (

  SPECIALTY_ID INT,
  SPECIALITY   VARCHAR(30),
  CONSTRAINT PK_SPECAILITY_ID PRIMARY KEY (SPECIALTY_ID)


);

CREATE TABLE VETERINARIAN_TABLE (

  VET_ID        VARCHAR(4),
  FIRST_NAME    VARCHAR(50),
  SURNAME       VARCHAR(50),
  CONTACT       VARCHAR(30),
  EMAIL         VARCHAR(30),
  SPECIALITY_ID INT,
  CONSTRAINT PK_VET_ID PRIMARY KEY (VET_ID),
  CONSTRAINT FK_SPECIALITY_ID FOREIGN KEY (SPECIALITY_ID) REFERENCES SPECIALITY_TABLE (SPECIALTY_ID)

);

CREATE TABLE STAFF_TABLE (

  STAFF_ID        VARCHAR(4),
  FIRST_NAME      VARCHAR(50),
  SURNAME         VARCHAR(50),
  JOB_DESCRIPTION VARCHAR(50),
  CONTACT         VARCHAR(30),
  CONSTRAINT PK_STAFF_ID PRIMARY KEY (STAFF_ID)

);

CREATE TABLE DISEASE_TABLE (

  DISEASE_ID   VARCHAR(9),
  DISEASE_NAME VARCHAR(50),
  CONSTRAINT PK_DISEASE_ID PRIMARY KEY (DISEASE_ID)

);

CREATE TABLE MEDICINE_TABLE (

  MED_ID          VARCHAR(9),
  MED_NAME        VARCHAR(50),
  MED_PRICE       NUMBER,
  MED_EXPIRY_DATE DATE,
  CONSTRAINT PK_MED_ID PRIMARY KEY (MED_ID)

);

CREATE TABLE BILLING_TABLE (

  BILL_ID     VARCHAR(9),
  CUSTOMER_ID VARCHAR(6),
  STAFF_ID    VARCHAR(4),
  BILL_HRS    NUMBER,
  CONSTRAINT PK_BILL_ID PRIMARY KEY (BILL_ID),
  CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER_TABLE (CUSTOMER_ID),
  CONSTRAINT FK_STAFF_ID FOREIGN KEY (STAFF_ID) REFERENCES STAFF_TABLE (STAFF_ID)

);

CREATE TABLE TREATMENT_TABLE (

  TREATMENT_ID VARCHAR(8),
  ANIMAL_ID    VARCHAR(4),
  DISEASE_ID   VARCHAR(9),
  BILL_ID      VARCHAR(9),
  VET_ID       VARCHAR(4),
  MED_ID       VARCHAR(9),
  CONSTRAINT PK_TREATMENT_ID PRIMARY KEY (TREATMENT_ID),
  CONSTRAINT FK_ANIMAL_ID FOREIGN KEY (ANIMAL_ID) REFERENCES ANIMAL_TABLE (ANIMAL_ID),
  CONSTRAINT FK_DISEASE_ID FOREIGN KEY (DISEASE_ID) REFERENCES DISEASE_TABLE (DISEASE_ID),
  CONSTRAINT FK_BILL_ID FOREIGN KEY (BILL_ID) REFERENCES BILLING_TABLE (BILL_ID),
  CONSTRAINT FK_VET_ID FOREIGN KEY (VET_ID) REFERENCES VETERINARIAN_TABLE (VET_ID),
  CONSTRAINT FK_MED_ID FOREIGN KEY (MED_ID) REFERENCES MEDICINE_TABLE (MED_ID)

);

--Customer Inserts
INSERT ALL
INTO CUSTOMER_TABLE VALUES ('10111', 'Pam', 'Willis', '041 123 4587', 'pw@ymail.com')
INTO CUSTOMER_TABLE VALUES ('10112', 'Henry', 'Jones', '021 457 2587', 'hjon@isat.com')
INTO CUSTOMER_TABLE VALUES ('10113', 'Alex', 'Smith', '011 125 5874', 'asm@conz.co.za')
INTO CUSTOMER_TABLE VALUES ('10114', 'Wayne', 'Willard', '011 125 8548 ', 'ww@ymail.com')
INTO CUSTOMER_TABLE VALUES ('10115', 'Sisanda', 'Bitterhout', '051 545 8987', 'sbitr@hmail.com')
SELECT 1
FROM DUAL;

--Animal Inserts
INSERT ALL
INTO ANIMAL_TABLE VALUES ('A50', 'Horse', 'American Quarter', 'Tan')
INTO ANIMAL_TABLE VALUES ('A51', 'Dog', 'Bichon Frise', 'White')
INTO ANIMAL_TABLE VALUES ('A52', 'Bird', 'African Grey', 'Grey')
INTO ANIMAL_TABLE VALUES ('A53', 'Horse', 'Friesian Horse', 'Black')
INTO ANIMAL_TABLE VALUES ('A54', 'Cat', 'American Shorthair', 'Tan')
INTO ANIMAL_TABLE VALUES ('A55', 'Horse', 'Appaloosa', 'Black')
INTO ANIMAL_TABLE VALUES ('A56', 'Dog', 'Clumber Spaniel', 'White')
INTO ANIMAL_TABLE VALUES ('A57', 'Bird', 'Conure', 'Green')
INTO ANIMAL_TABLE VALUES ('A58', 'Bird', 'Macaw', 'Blue and Yellow')
INTO ANIMAL_TABLE VALUES ('A59', 'Cat', 'Bombay', ' Black')
SELECT 1
FROM DUAL;

--Speciality Inserts
INSERT ALL
INTO SPECIALITY_TABLE VALUES (1, 'Equus caballus')
INTO SPECIALITY_TABLE VALUES (2, 'Canis lupus')
INTO SPECIALITY_TABLE VALUES (3, 'Felis Catus')
INTO SPECIALITY_TABLE VALUES (4, 'Aves')
SELECT 1
FROM DUAL;

--Veterinarian Inserts
INSERT ALL
INTO VETERINARIAN_TABLE VALUES ('555', 'Sam', 'Anderson', '086 1248854', 'san@ymail.com', 1)
INTO VETERINARIAN_TABLE VALUES ('556', 'Eric', 'Johnson', '072 5486587', 'ej@isat.com', 1)
INTO VETERINARIAN_TABLE VALUES ('557', 'Jeffery', 'Tims', '083 1545854', 'jt@ymail.com', 3)
INTO VETERINARIAN_TABLE VALUES ('558', 'Simon', 'Gumede', '081 5855983', 'sge@isat.com', 2)
INTO VETERINARIAN_TABLE VALUES ('559', 'Maxi', 'Aneshia', '076 5858547', 'max@hmail.com', 4)
SELECT 1
FROM DUAL;

--Staff Inserts
INSERT ALL
INTO STAFF_TABLE VALUES ('111', 'Jenny', 'Loots', 'Receptionist', '086 129 1198')
INTO STAFF_TABLE VALUES ('112', 'Monique', 'Van Eyck', 'Assistant', '087 545 5851')
SELECT 1
FROM DUAL;

--Disease Inserts
INSERT ALL
INTO DISEASE_TABLE VALUES ('dis_101', 'Cerebellar abiotrophy')
INTO DISEASE_TABLE VALUES ('dis_102', 'Salmonellosis')
INTO DISEASE_TABLE VALUES ('dis_103', 'Proventricular Dilatation')
INTO DISEASE_TABLE VALUES ('dis_104', 'Candidiasis')
INTO DISEASE_TABLE VALUES ('dis_105', 'Parvo')
INTO DISEASE_TABLE VALUES ('dis_106', 'Periodontis')
SELECT 1
FROM DUAL;

--Medicine Inserts
INSERT ALL
INTO MEDICINE_TABLE VALUES ('med_101', 'Anti-Inflammatory', 180.95, '25 March 2018')
INTO MEDICINE_TABLE VALUES ('med_102', 'Electrolyte Replacement', 298.75, '13 April 2018')
INTO MEDICINE_TABLE VALUES ('med_103', 'COX-2 Inhibitors', 307.09, '8 February 2018')
INTO MEDICINE_TABLE VALUES ('med_104', 'Antifungal Tablets', 55.98, '19 March 2018')
INTO MEDICINE_TABLE VALUES ('med_105', 'Colostrum', 567.09, '17 January 2018')
INTO MEDICINE_TABLE VALUES ('med_106', 'Antiparasitic Tablets', 290.98, '23 October 2018')
INTO MEDICINE_TABLE VALUES ('med_107', 'Compax oral hygiene tablets', 125.89, '25 June 2018')
SELECT 1
FROM DUAL;

--Billing Inserts
INSERT ALL
INTO BILLING_TABLE VALUES ('bil_123', '10111', '111', 5)
INTO BILLING_TABLE VALUES ('bil_124', '10115', '111', 3)
INTO BILLING_TABLE VALUES ('bil_125', '10113', '112', 7)
INTO BILLING_TABLE VALUES ('bil_126', '10111', '111', 8)
INTO BILLING_TABLE VALUES ('bil_127', '10112', '112', 10)
SELECT 1
FROM DUAL;

--Treatment Inserts
INSERT ALL
INTO TREATMENT_TABLE VALUES ('t_111', 'A50', 'dis_101', 'bil_124', '555', 'med_104')
INTO TREATMENT_TABLE VALUES ('t_112', 'A55', 'dis_101', 'bil_127', '555', 'med_101')
INTO TREATMENT_TABLE VALUES ('t_113', 'A51', 'dis_105', 'bil_123', '558', 'med_103')
INTO TREATMENT_TABLE VALUES ('t_114', 'A57', 'dis_104', 'bil_126', '559', 'med_103')
INTO TREATMENT_TABLE VALUES ('t_115', 'A51', 'dis_105', 'bil_125', '558', 'med_104')
SELECT 1
FROM DUAL;

--Question 1
DECLARE
  DISPLAY_NAME     VARCHAR(50);
  DISPLAY_BILL     BILLING_TABLE.BILL_ID%TYPE;
  DISPLAY_MEDICINE MEDICINE_TABLE.MED_NAME%TYPE;
  DISPLAY_PRICE    MEDICINE_TABLE.MED_PRICE%TYPE;

  CURSOR MedicineCursor IS SELECT
                             FIRST_NAME || ',' || SURNAME AS NAME,
                             BILLING_TABLE.BILL_ID,
                             MEDICINE_TABLE.MED_NAME,
                             MED_PRICE
                           FROM TREATMENT_TABLE
                             , BILLING_TABLE
                             , CUSTOMER_TABLE
                             , MEDICINE_TABLE
                           WHERE BILLING_TABLE.BILL_ID = TREATMENT_TABLE.BILL_ID
                                 AND CUSTOMER_TABLE.CUSTOMER_ID = BILLING_TABLE.CUSTOMER_ID
                                 AND MEDICINE_TABLE.MED_ID = TREATMENT_TABLE.MED_ID
                                 AND MEDICINE_TABLE.MED_PRICE > 200;

BEGIN
  OPEN MedicineCursor;
  LOOP
    FETCH MedicineCursor INTO DISPLAY_NAME, DISPLAY_BILL, DISPLAY_MEDICINE, DISPLAY_PRICE;

    EXIT WHEN MedicineCursor%NOTFOUND;

    DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' || DISPLAY_NAME);
    DBMS_OUTPUT.PUT_LINE('BILL ID: ' || DISPLAY_BILL);
    DBMS_OUTPUT.PUT_LINE('MEDICINE: ' || DISPLAY_MEDICINE);
    DBMS_OUTPUT.PUT_LINE('PRICE: R' || DISPLAY_PRICE);
    DBMS_OUTPUT.PUT_LINE('-----------------------------');


  END LOOP;
END;

--Question 2
DECLARE
  DISPLAY_CUSTOMER CUSTOMER_TABLE.CUSTOMER_ID%TYPE;
  DISPLAY_DISEASE  DISEASE_TABLE.DISEASE_NAME%TYPE;
  DISPLAY_TYPE     ANIMAL_TABLE.ANIMAL_TYPE%TYPE;
  DISPLAY_MEDICINE MEDICINE_TABLE.MED_NAME%TYPE;
  DISPLAY_PRICE    MEDICINE_TABLE.MED_PRICE%TYPE;
  DISPLAY_DISCOUNT MEDICINE_TABLE.MED_PRICE%TYPE;

  CURSOR DiscountCursor IS SELECT
                             CUSTOMER_TABLE.CUSTOMER_ID,
                             DISEASE_TABLE.DISEASE_NAME,
                             ANIMAL_TABLE.ANIMAL_TYPE,
                             MEDICINE_TABLE.MED_NAME,
                             MEDICINE_TABLE.MED_PRICE
                           FROM
                             TREATMENT_TABLE
                             , BILLING_TABLE
                             , CUSTOMER_TABLE
                             , MEDICINE_TABLE
                             , DISEASE_TABLE
                             , ANIMAL_TABLE
                           WHERE BILLING_TABLE.BILL_ID = TREATMENT_TABLE.BILL_ID
                                 AND CUSTOMER_TABLE.CUSTOMER_ID = BILLING_TABLE.CUSTOMER_ID
                                 AND MEDICINE_TABLE.MED_ID = TREATMENT_TABLE.MED_ID
                                 AND DISEASE_TABLE.DISEASE_ID = TREATMENT_TABLE.DISEASE_ID
                                 AND ANIMAL_TABLE.ANIMAL_ID = TREATMENT_TABLE.ANIMAL_ID
                           ORDER BY CUSTOMER_ID ASC;

BEGIN
  OPEN DiscountCursor;
  LOOP
    FETCH DiscountCursor INTO DISPLAY_CUSTOMER
                              , DISPLAY_DISEASE
                              , DISPLAY_TYPE
                              , DISPLAY_MEDICINE
                              , DISPLAY_PRICE;

    EXIT WHEN DiscountCursor%NOTFOUND;

    DISPLAY_DISCOUNT := 0;

    IF DISPLAY_TYPE LIKE 'Horse'
    THEN
      DISPLAY_DISCOUNT := ROUND(DISPLAY_PRICE - (DISPLAY_PRICE * 0.15), 2);
    END IF;

    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || DISPLAY_CUSTOMER);
    DBMS_OUTPUT.PUT_LINE('DISEASE: ' || DISPLAY_DISEASE);
    DBMS_OUTPUT.PUT_LINE('Animal Type: ' || DISPLAY_TYPE);
    DBMS_OUTPUT.PUT_LINE('MEDICINE: ' || DISPLAY_MEDICINE);
    DBMS_OUTPUT.PUT_LINE('PRICE: R' || DISPLAY_PRICE);
    DBMS_OUTPUT.PUT_LINE('DISCOUNT PRICE: R' || DISPLAY_DISCOUNT);
    DBMS_OUTPUT.PUT_LINE('-----------------------------');

  END LOOP;
END;
--Question 3
DECLARE
  DISPLAY_VET_ID      VETERINARIAN_TABLE.VET_ID%TYPE;
  DISPLAY_SPECIALITY  SPECIALITY_TABLE.SPECIALITY%TYPE;
  DISPLAY_ANIMAL_TYPE ANIMAL_TABLE.ANIMAL_TYPE%TYPE;
  DISPLAY_DISEASE     DISEASE_TABLE.DISEASE_NAME%TYPE;
  DISPLAY_MEDICINE    MEDICINE_TABLE.MED_NAME%TYPE;
  DISPLAY_STAFF_ID    STAFF_TABLE.STAFF_ID%TYPE;
  DISPLAY_CUSTOMER_ID CUSTOMER_TABLE.CUSTOMER_ID%TYPE;
  DISPLAY_BILLING_ID  BILLING_TABLE.BILL_ID%TYPE;

  CURSOR TreatmentCursor IS SELECT
                              TREATMENT_TABLE.VET_ID
                              , SPECIALITY_TABLE.SPECIALITY
                              , ANIMAL_TABLE.ANIMAL_TYPE
                              , DISEASE_TABLE.DISEASE_NAME
                              , MEDICINE_TABLE.MED_NAME
                              , BILLING_TABLE.STAFF_ID
                              , CUSTOMER_TABLE.CUSTOMER_ID
                              , BILLING_TABLE.BILL_ID
                            FROM TREATMENT_TABLE
                              , BILLING_TABLE
                              , CUSTOMER_TABLE
                              , MEDICINE_TABLE
                              , DISEASE_TABLE
                              , ANIMAL_TABLE
                              , VETERINARIAN_TABLE
                              , SPECIALITY_TABLE
                            WHERE BILLING_TABLE.BILL_ID = TREATMENT_TABLE.BILL_ID
                                  AND CUSTOMER_TABLE.CUSTOMER_ID = BILLING_TABLE.CUSTOMER_ID
                                  AND MEDICINE_TABLE.MED_ID = TREATMENT_TABLE.MED_ID
                                  AND DISEASE_TABLE.DISEASE_ID = TREATMENT_TABLE.DISEASE_ID
                                  AND ANIMAL_TABLE.ANIMAL_ID = TREATMENT_TABLE.ANIMAL_ID
                                  AND VETERINARIAN_TABLE.VET_ID = TREATMENT_TABLE.VET_ID
                                  AND SPECIALITY_TABLE.SPECIALTY_ID = VETERINARIAN_TABLE.SPECIALITY_ID
                                  AND MEDICINE_TABLE.MED_ID LIKE 'med_101';

BEGIN
    OPEN TreatmentCursor;
      LOOP
        FETCH TreatmentCursor INTO DISPLAY_VET_ID
                                  , DISPLAY_SPECIALITY
                                  , DISPLAY_ANIMAL_TYPE
                                  , DISPLAY_DISEASE
                                  , DISPLAY_MEDICINE
                                  , DISPLAY_STAFF_ID
                                  , DISPLAY_CUSTOMER_ID
                                  , DISPLAY_BILLING_ID;

        EXIT WHEN TreatmentCursor%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('VET ID: ' || DISPLAY_VET_ID);
        DBMS_OUTPUT.PUT_LINE('SPECIALITY: ' || DISPLAY_SPECIALITY);
        DBMS_OUTPUT.PUT_LINE('Animal Type: ' || DISPLAY_ANIMAL_TYPE);
        DBMS_OUTPUT.PUT_LINE('DISEASE: ' || DISPLAY_DISEASE);
        DBMS_OUTPUT.PUT_LINE('MEDICINE: ' || DISPLAY_MEDICINE);
        DBMS_OUTPUT.PUT_LINE('STAFF ID: ' || DISPLAY_STAFF_ID);
        DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || DISPLAY_CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE('BILL ID: ' || DISPLAY_BILLING_ID);
        DBMS_OUTPUT.PUT_LINE('-----------------------------');


      END LOOP;

END;

--Question 9
CREATE OR REPLACE VIEW medicine_expiry(MED_ID,MED_NAME,ANIMAL_ID,ANIMAL,VETERINARIAN,SPECIALITY,EXPIRY_DATE)
  AS
    SELECT
         MEDICINE_TABLE.MED_ID
        ,MEDICINE_TABLE.MED_NAME
        ,ANIMAL_TABLE.ANIMAL_ID
        ,ANIMAL_TYPE,VETERINARIAN_TABLE.FIRST_NAME||','||VETERINARIAN_TABLE.SURNAME
        ,SPECIALITY_TABLE.SPECIALITY
        ,(MED_EXPIRY_DATE-5)
      FROM TREATMENT_TABLE,MEDICINE_TABLE,ANIMAL_TABLE,VETERINARIAN_TABLE,SPECIALITY_TABLE
        WHERE MEDICINE_TABLE.MED_ID = TREATMENT_TABLE.MED_ID
        AND ANIMAL_TABLE.ANIMAL_ID = TREATMENT_TABLE.ANIMAL_ID
        AND VETERINARIAN_TABLE.VET_ID = TREATMENT_TABLE.VET_ID
        AND SPECIALITY_TABLE.SPECIALTY_ID = VETERINARIAN_TABLE.SPECIALITY_ID
      ORDER BY MED_ID ASC;

SELECT *
FROM medicine_expiry;

--Question 10
DECLARE
  DISPLAY_DISEASE DISEASE_TABLE.DISEASE_NAME%TYPE ;
  DISPLAY_ANIMAL_TYPE ANIMAL_TABLE.ANIMAL_TYPE%TYPE;
  DISPLAY_NAME VETERINARIAN_TABLE.FIRST_NAME%TYPE;
  CHECK_COUNT NUMBER;
  TREATMENT_COUNT NUMBER;
  DISPLAY_LIST VARCHAR(200);

  CURSOR ReportCursor IS SELECT
                          ANIMAL_TABLE.ANIMAL_TYPE
                        , DISEASE_TABLE.DISEASE_NAME
                        , VETERINARIAN_TABLE.FIRST_NAME || ',' || VETERINARIAN_TABLE.SURNAME
                        , COUNT(DISEASE_NAME)
                      FROM TREATMENT_TABLE
                        , MEDICINE_TABLE
                        , DISEASE_TABLE
                        , ANIMAL_TABLE
                        , VETERINARIAN_TABLE
                      WHERE  MEDICINE_TABLE.MED_ID = TREATMENT_TABLE.MED_ID
                            AND DISEASE_TABLE.DISEASE_ID = TREATMENT_TABLE.DISEASE_ID
                            AND ANIMAL_TABLE.ANIMAL_ID = TREATMENT_TABLE.ANIMAL_ID
                            AND VETERINARIAN_TABLE.VET_ID = TREATMENT_TABLE.VET_ID
                      GROUP BY DISEASE_NAME, ANIMAL_TYPE, FIRST_NAME, SURNAME;

  BEGIN
    OPEN ReportCursor;
    TREATMENT_COUNT := 0;
    LOOP
      FETCH ReportCursor INTO DISPLAY_ANIMAL_TYPE, DISPLAY_DISEASE, DISPLAY_NAME, CHECK_COUNT;

      EXIT WHEN ReportCursor%NOTFOUND;

      IF CHECK_COUNT > 1
        THEN
          DISPLAY_LIST := DISPLAY_LIST || DISPLAY_DISEASE || ',';
      END IF;

      TREATMENT_COUNT := TREATMENT_COUNT +1;

        DBMS_OUTPUT.PUT_LINE('TREATMENT DETAILS ' || TREATMENT_COUNT);
        DBMS_OUTPUT.PUT_LINE('      DISEASE: ' || DISPLAY_DISEASE);
        DBMS_OUTPUT.PUT_LINE('      ANIMAL: ' || DISPLAY_ANIMAL_TYPE);
        DBMS_OUTPUT.PUT_LINE('      VET: ' || DISPLAY_NAME);
        DBMS_OUTPUT.PUT_LINE('-----------------------------');


    END LOOP;

      DBMS_OUTPUT.PUT_LINE('REPORT DETAILS');
      DBMS_OUTPUT.PUT_LINE('-----------------------------');
      DBMS_OUTPUT.PUT_LINE('DISEASE COUNT:    '|| TREATMENT_COUNT);
      DBMS_OUTPUT.PUT_LINE('ANIMAL COUNT:     '|| TREATMENT_COUNT);
      DBMS_OUTPUT.PUT_LINE('VET COUNT:        '|| TREATMENT_COUNT);
      DBMS_OUTPUT.PUT_LINE('-----------------------------');

      IF DISPLAY_LIST IS NOT NULL
        THEN
        DBMS_OUTPUT.PUT_LINE('DISEASE WARNING');
        DBMS_OUTPUT.PUT_LINE('-----------------------------');
        DBMS_OUTPUT.PUT_LINE('      '||DISPLAY_LIST);
        DBMS_OUTPUT.PUT_LINE('-----------------------------');
        DBMS_OUTPUT.PUT_LINE('END OF REPORT');

      END IF;


END;






